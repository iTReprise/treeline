#!/usr/bin/env node

/**
 * Module dependencies.
 */

const http = require('http');
const debug = require('debug')('riot_stalker:server');
const app = require('../app');

let port;
let server;

function normalizePort(val) {
  const parsedVal = parseInt(val, 10);

  if (Number.isNaN(parsedVal)) { return val; }
  if (parsedVal >= 0) { return parsedVal; }

  return false;
}

function onError(err) {
  if (err.syscall !== 'listen') { throw err; }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  switch (err.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw err;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `Pipe ${addr}`
    : `Port ${addr.port}`;

  debug(`Listening on ${bind}`);
}

/* Get port from environment */
port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

server = http.createServer(app);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
